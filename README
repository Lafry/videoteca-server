# Progetto Videoteca

Il Progetto Videoteca è un'applicazione client-server per la gestione di un sistema di noleggio video (videoteca). Il progetto è stato sviluppato in C ed è strutturato in vari moduli:

- **Server**: gestisce le richieste dei client, le operazioni di registrazione, login, ricerca film, noleggio e restituzione.  
- **Client**: un'applicazione console che permette agli utenti di interagire con il server (registrazione, login, ricerca, noleggio, restituzione).
- **Data**: contiene file JSON con i dati iniziali, ad esempio un file `films.json` con una decina di titoli.

Il progetto integra anche:
- **cJSON** per la gestione dei dati in formato JSON.
- **OpenSSL** per calcolare l'hash SHA256 (sul client, per proteggere le password).
- **Docker** (e Docker Compose, se usato) per creare ed eseguire il container del server.

---

## Struttura del Progetto

La struttura tipica del repository è la seguente:

progetto-videoteca/
├── data/
│   ├── users.json       # File JSON con dati degli utenti
│   └── films.json       # File JSON con dati dei film
├── server/              # Contiene l'applicazione server scritta in C
|   ├── auth/ 
|   │   ├── auth.c       # Gestione operazioni di registrazione e login
|   │   └── auth.h
|   ├── json_db/ 
|   │   ├── json_db.c    # Gestione della base dati (lettura/scrittura dei file JSON)
|   │   └── json_db.h
|   ├── rental/ 
|   │   ├── rental.c     # Gestione delle operazioni di noleggio, restituzione, ricerca
|   │   └── rental.h
|   ├── cJSON/ 
|   │   ├── cJSON.c      # Libreria cJSON per gestire i file JSON
|   │   └── cJSON.h
│   ├── main.c           # Punto d'ingresso del server
│   ├── Dockerfile       # Per creare l'immagine del server
│   └── Makefile         # Build del server (usa: `-D_XOPEN_SOURCE` per strptime, ecc.)
├── docker-compose.yml   # per la gestione multi-container
└── README.md            # Questo file

---

## Requisiti

- **Sistema operativo**: Linux (o ambiente compatibile)  
- **Compilatore C:** GCC (o equivalente)  
- **Librerie e strumenti**:
  - **POSIX**: per la programmazione di rete (inclusi `<arpa/inet.h>`, `<netinet/in.h>`, `<sys/socket.h>`)
  - **OpenSSL**: per calcolare SHA256 (il client usa `-lssl -lcrypto`)
  - **Docker e Docker Compose** (se desideri eseguire il server in container)
  - **Git**: per il versionamento del codice
